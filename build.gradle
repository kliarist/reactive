plugins {
  id 'org.springframework.boot' version '2.6.4'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.cloud.contract' version '3.1.1'
  id 'java'
  id 'jacoco'
  id 'groovy'
  id 'checkstyle'
  id "org.sonarqube" version "3.3"
  id 'com.palantir.git-version' version '0.13.0'
}

group = 'com.thekliar'
version = gitVersion()
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.apache.kafka:kafka-streams'

  implementation "org.mapstruct:mapstruct:$mapstructVersion"
  implementation ("com.querydsl:querydsl-mongodb") {
    exclude group: 'org.mongodb'
  }
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
  implementation "org.springdoc:springdoc-openapi-webflux-core:$springdocOpenApiVersion"
  implementation "org.springdoc:springdoc-openapi-webflux-ui:$springdocOpenApiVersion"

  compileOnly 'org.projectlombok:lombok'

  annotationProcessor(
      'org.projectlombok:lombok',
      "com.querydsl:querydsl-apt:$queryDslVersion:general",
      "org.mapstruct:mapstruct-processor:$mapstructVersion",
  )

  testImplementation ('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'io.projectreactor:reactor-test'

  testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
  testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
  testImplementation "org.testcontainers:mongodb:${testContainersVersion}"

  testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
  testImplementation ("io.rest-assured:spring-web-test-client")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

tasks.withType(Test).configureEach {
  String etags = project.hasProperty("excludeTags") ? project.property("excludeTags") : '_ignored_'
  jacoco {
    enabled = true
  }
  useJUnitPlatform {
    excludeEngines('junit-vintage')
    excludeTags etags
  }
  systemProperties['junit.jupiter.execution.parallel.enabled'] = true
  systemProperties['junit.jupiter.execution.parallel.mode.default'] = 'same_thread'
  systemProperties['junit.jupiter.execution.parallel.mode.classes.default'] = 'concurrent'
  maxParallelForks = ((Integer) Runtime.runtime.availableProcessors()).intdiv(2) ?: 1
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    csv.required = true
    html.outputLocation = layout.buildDirectory.dir('reports/jacocoHtml')
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
          "com/thekliar/reactive/model/*",
          "com/thekliar/reactive/dto/*"
      ])
    }))
  }
}

contracts {
  testFramework = "JUNIT5"
  testMode = "WEBTESTCLIENT"
  // set package to be generated so we can exclude it in checkstyle TODO: check if there's a better way
  packageWithBaseClasses = 'com.thekliar.reactive.generated'
  baseClassMappings {
    baseClassMapping(".*blogs.*", "com.thekliar.reactive.BlogBase")
  }
}

contractTest {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
  // Optional report
//  afterSuite { desc, result ->
//    if (!desc.parent) {
//      println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
//      boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
//      if (result.testCount == 0 && !skipTests) {
//        throw new IllegalStateException("No tests were found. Failing the build")
//      }
//    }
//  }
}

// Set the below to SKIP checkstyle by default
//project.tasks.checkstyleMain.enabled = false
//project.tasks.checkstyleTest.enabled = false

checkstyleContractTest.exclude('**/generated/*.java')

checkstyle {
  toolVersion = "9.3"
  // To checkstyle only main and not test uncomment below
  // sourceSets = [project.sourceSets.main]
}

sonarqube {
  properties {
    property "sonar.projectKey", "reactive"
    property "sonar.organization", "reactive"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}
